substitutions:
  max_temp: "80"

  single_click_min_length: 50ms
  single_click_max_length: 350ms
  CHANNEL_HIGHT: "25"
  backlight_min: 50%
  backlight_max: 100%

# For PCB v0.1.9 with dual core ESP32

esphome:
  on_boot:
    priority: 600
    # ...
    then:
      - output.turn_off: devices_reset
      - light.turn_on:
          id: display_backlight
          brightness: ${backlight_min}

esp32:
  board: esp32doit-devkit-v1
  framework:
    type: arduino

external_components:
  - source:
      type: local
      path: components
  # use spi multibus fix until 2023.9.3
  # - source:
  #     type: git
  #     url: https://github.com/angelnu/esphome-1
  #     ref: spi_multibus
  #   components: [spi]
  #   refresh: 3600s

# ethernet:
#   type: LAN8720
#   mdc_pin: GPIO23
#   mdio_pin: GPIO18
#   clk_mode: GPIO17_OUT

spi:
  - id: spi_bus_1
    clk_pin: GPIO32
    mosi_pin: GPIO33
    miso_pin: GPIO39
    # Circumvention: the second SPI in HW does not compile. Use HW SPI for display
  - id: spi_bus_2
    clk_pin: GPIO15
    mosi_pin: GPIO13
    #miso_pin: GPIO39

mcp23s17:
  - id: 'mcp23s17_hub'
    spi_id: spi_bus_1
    cs_pin: GPIO16
    #irq_pin: GPIO35
    deviceaddress: 0

# bit 0 = input, inverted - Switch3
# bit 1 = input, inverted - Switch2
# bit 2 = input - Button Down
# bit 3 = input - Button OK
# bit 4 = output - Reset, display, ADE7953
# bit 5 = input - Button Up
# bit 6 = input, inverted - Switch1
# bit 7
# bit 8 = output - Relay O1
# bit 9
# bit 10
# bit 11
# bit 12 = output - Relay O4
# bit 13 = output - Relay O2
# bit 14 = output - Relay O3
# bit 15 = input, inverted - Switch4

output:
  - platform: gpio
    id: devices_reset
    pin:
      mcp23xxx: mcp23s17_hub
      # Use pin number 0
      number: 4
      mode:
        output: true
      inverted: true
  - platform: ledc
    pin: GPIO12
    id: display_backlight_output

light:
  - platform: monochromatic
    output: display_backlight_output
    name: Display backlight
    id: display_backlight

script:
  - id: backlight_script
    mode: restart     # Light will be kept on during 1 minute since
                      # the latest time the script is executed
    then:
      - light.turn_on:
          id: display_backlight
          brightness: ${backlight_max}
      - delay: 10 min
      - light.turn_on:
          id: display_backlight
          brightness: ${backlight_min}
    
# Individual outputs
switch:
  - platform: gpio
    name: "${relay_1}"
    id: relay_1
    restore_mode: ${restore_mode}
    pin:
      mcp23xxx: mcp23s17_hub
      # Use pin number 0
      number: 8
      mode:
        output: true
      inverted: false
  - platform: gpio
    name: "${relay_4}"
    id: relay_4
    restore_mode: ${restore_mode}
    pin:
      mcp23xxx: mcp23s17_hub
      # Use pin number 0
      number: 12
      mode:
        output: true
      inverted: false
  - platform: gpio
    name: "${relay_2}"
    id: relay_2
    restore_mode: ${restore_mode}
    pin:
      mcp23xxx: mcp23s17_hub
      # Use pin number 0
      number: 13
      mode:
        output: true
      inverted: false
  - platform: gpio
    name: "${relay_3}"
    id: relay_3
    restore_mode: ${restore_mode}
    pin:
      mcp23xxx: mcp23s17_hub
      # Use pin number 0
      number: 14
      mode:
        output: true
      inverted: false

# Individual inputs
binary_sensor:
  - platform: gpio
    #name: switch 3
    id: switch_3
    pin:
      mcp23xxx: mcp23s17_hub
      interrupt: CHANGE
      number: 0
      mode:
        input: true
      inverted: false
  - platform: gpio
    #name: switch 2
    id: switch_2
    pin:
      mcp23xxx: mcp23s17_hub
      interrupt: CHANGE
      number: 1
      mode:
        input: true
      inverted: false
  - platform: gpio
    #name: Down
    id: my_down_key
    pin:
      mcp23xxx: mcp23s17_hub
      interrupt: CHANGE
      number: 2
      mode:
        input: true
      inverted: true
    on_click:
      min_length: ${single_click_min_length}
      max_length: ${single_click_max_length}
      then:
        - if:
            condition:
              lambda: |-
                return id(selected_display_line) < id(max_display_line);
            then:
              - lambda: |-
                  id(selected_display_line)++;
              - component.update: my_display
        - script.execute: backlight_script
  - platform: gpio
    #name: Ok
    id: my_ok_key
    pin:
      mcp23xxx: mcp23s17_hub
      interrupt: CHANGE
      number: 3
      mode:
        input: true
      inverted: true
    on_click:
      min_length: ${single_click_min_length}
      max_length: ${single_click_max_length}
      then:
        - lambda: |-
            id(relays)[id(selected_display_line)]->toggle();
        - component.update: my_display
        - script.execute: backlight_script
  - platform: gpio
    #name: Up
    id: my_up_key
    pin:
      mcp23xxx: mcp23s17_hub
      interrupt: CHANGE
      number: 5
      mode:
        input: true
      inverted: true
    on_click:
      min_length: ${single_click_min_length}
      max_length: ${single_click_max_length}
      then:
        - if:
            condition:
              lambda: |-
                return id(selected_display_line) > 0;
            then:
              - lambda: |-
                  id(selected_display_line)--;
              - component.update: my_display
        - script.execute: backlight_script
  - platform: gpio
    #name: switch 1
    id: switch_1
    pin:
      mcp23xxx: mcp23s17_hub
      interrupt: CHANGE
      number: 6
      mode:
        input: true
      inverted: false
  - platform: gpio
    #name: switch 4
    id: switch_4
    pin:
      mcp23xxx: mcp23s17_hub
      interrupt: CHANGE
      number: 15
      mode:
        input: true
      inverted: false

sensor:
  - platform: ade7953_spi
    id: ade7953_1
    spi_id: spi_bus_1
    cs_pin: GPIO04
    irq_pin: GPIO35
    current_pga_gain_a: 2x
    current_pga_gain_b: 2x
    current_gain_a: 0x600000
    current_gain_b: 0x600000
    voltage:
      name: Voltage 1
      id: my_voltage_1
      device_class: voltage
      state_class: measurement
      unit_of_measurement: "V"
      filters:
      - delta: 1
    frequency:
      name: Frequency 1
      id: my_frequency_1
      filters:
      - delta: 0.03
    current_a:
      name: "${relay_1} Current"
      id: my_current_1
      device_class: current
      state_class: measurement
      unit_of_measurement: "A"
      accuracy_decimals: 3
      filters:
      - delta: 0.001
    current_b:
      name: "${relay_2} Current"
      id: my_current_2
      device_class: current
      state_class: measurement
      unit_of_measurement: "A"
      filters:
      - delta: 0.01
    power_factor_a:
      name: "${relay_1} Power Factor"
      id: my_power_factor_1
      device_class: power_factor
      state_class: measurement
      unit_of_measurement: "%"
      filters:
      - delta: 5
    power_factor_b:
      name: "${relay_2} Power Factor"
      id: my_power_factor_2
      device_class: power_factor
      state_class: measurement
      unit_of_measurement: "%"
      filters:
      - delta: 5
    apparent_power_a:
      name: "${relay_1} Apparent Power"
      id: my_apparent_power_1
      device_class: apparent_power
      state_class: measurement
      unit_of_measurement: "VA"
      filters:
      - delta: 1
    apparent_power_b:
      name: "${relay_2} Apparent Power"
      id: my_apparent_power_2
      device_class: apparent_power
      state_class: measurement
      unit_of_measurement: "VA"
      filters:
      - delta: 1
    active_power_a:
      name: "${relay_1} Power"
      id: active_power_id_1
      device_class: power
      state_class: measurement
      unit_of_measurement: "W"
      # active_power is inverted, so multiply by -1
      filters:
      - multiply: -1
      - delta: 1
      on_value:
        then:
          - component.update: my_display
    active_power_b:
      name: "${relay_2} Power"
      id: active_power_id_2
      device_class: power
      state_class: measurement
      unit_of_measurement: "W"
      # active_power is inverted, so multiply by -1
      filters:
      - multiply: -1
      - delta: 1
      on_value:
        then:
          - component.update: my_display
    reactive_power_a:
      name: "${relay_1} Reactive Power"
      id: my_reactive_power_1
      device_class: reactive_power
      state_class: measurement
      unit_of_measurement: "var"
      # reactive_power is inverted, so multiply by -1
      filters:
      - multiply: -1
      - delta: 1
    reactive_power_b:
      name: "${relay_2} Reactive Power"
      id: my_reactive_power_2
      device_class: reactive_power
      state_class: measurement
      unit_of_measurement: "var"
      # reactive_power is inverted, so multiply by -1
      filters:
      - multiply: -1
      - delta: 1
    update_interval: 1s

  - platform: ade7953_spi
    id: ade7953_2
    spi_id: spi_bus_1
    cs_pin: GPIO14
    irq_pin: GPIO35
    current_pga_gain_a: 2x
    current_pga_gain_b: 2x
    current_gain_a: 0x600000
    current_gain_b: 0x600000
    voltage:
      name: Voltage
      id: my_voltage_2
      device_class: voltage
      state_class: measurement
      unit_of_measurement: "V"
      filters:
      - delta: 1
    frequency:
      name: Frequency 2
      id: my_frequency_2
      filters:
      - delta: 0.03
    current_a:
      name: "${relay_3} Current"
      id: my_current_3
      device_class: current
      state_class: measurement
      unit_of_measurement: "A"
      filters:
      - delta: 0.01
    current_b:
      name: "${relay_4} Current"
      id: my_current_4
      device_class: current
      state_class: measurement
      unit_of_measurement: "A"
      filters:
      - delta: 0.01
    power_factor_a:
      name: "${relay_3} Power Factor"
      id: my_power_factor_3
      device_class: power_factor
      state_class: measurement
      unit_of_measurement: "%"
      filters:
      - delta: 5
    power_factor_b:
      name: "${relay_4} Power Factor"
      id: my_power_factor_4
      device_class: power_factor
      state_class: measurement
      unit_of_measurement: "%"
      filters:
      - delta: 5
    apparent_power_a:
      name: "${relay_3} Apparent Power"
      id: my_apparent_power_3
      device_class: apparent_power
      state_class: measurement
      unit_of_measurement: "VA"
      filters:
      - delta: 1
    apparent_power_b:
      name: "${relay_4} Apparent Power"
      id: my_apparent_power_4
      device_class: apparent_power
      state_class: measurement
      unit_of_measurement: "VA"
      filters:
      - delta: 1
    active_power_a:
      name: "${relay_3} Power"
      id: active_power_id_3
      device_class: power
      state_class: measurement
      unit_of_measurement: "W"
      # active_power is inverted, so multiply by -1
      filters:
      - multiply: -1
      - delta: 1
      on_value:
        then:
          - component.update: my_display
    active_power_b:
      name: "${relay_4} Power"
      id: active_power_id_4
      device_class: power
      state_class: measurement
      unit_of_measurement: "W"
      # active_power is inverted, so multiply by -1
      filters:
      - multiply: -1
      - delta: 1
      on_value:
        then:
          - component.update: my_display
    reactive_power_a:
      name: "${relay_3} Reactive Power"
      id: my_reactive_power_3
      device_class: reactive_power
      state_class: measurement
      unit_of_measurement: "var"
      # reactive_power is inverted, so multiply by -1
      filters:
      - multiply: -1
      - delta: 1
    reactive_power_b:
      name: "${relay_4} Reactive Power"
      id: my_reactive_power_4
      device_class: reactive_power
      state_class: measurement
      unit_of_measurement: "var"
      # reactive_power is inverted, so multiply by -1
      filters:
      - multiply: -1
      - delta: 1
    update_interval: 1s

  #temperature sensor
  - platform: ntc
    sensor: temp_resistance_reading
    name: "Temperature"
    id: temp_id
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    entity_category: 'diagnostic'
    calibration:
      #These default values don't seem accurate
      b_constant: 3350
      reference_resistance: 4700
      reference_temperature: 25C
    on_value_range:
      - above: ${max_temp}
        then:
          - switch.turn_off: "relay_1"
          - switch.turn_off: "relay_2"
          - switch.turn_off: "relay_3"
          - switch.turn_off: "relay_4"
          - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: "Message from ${friendly_name}"
                data_template:
                  message: "${friendly_name} turned off because temperature exceeded ${max_temp}°C"

  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 5600

  - platform: adc
    id: temp_analog_reading
    pin: GPIO36
    attenuation: 11db
    update_interval: 60s

globals:
  - id: selected_display_line
    type: uint8_t
    restore_value: no
    initial_value: '0'
  - id: max_display_line
    type: uint8_t
    restore_value: no
    initial_value: '3'
  - id: relays
    type: "esphome::gpio::GPIOSwitch *[4]"
    restore_value: no
    initial_value: '{relay_1, relay_2, relay_3, relay_4}'
  - id: relay_names
    type: "const char *[4]"
    restore_value: no
    initial_value: '{"${relay_1}", "${relay_2}", "${relay_3}", "${relay_4}"}'
  - id: active_powers
    type: "esphome::sensor::Sensor *[4]"
    restore_value: no
    initial_value: '{active_power_id_1, active_power_id_2, active_power_id_3, active_power_id_4}'

font:
  - file: "gfonts://Roboto"
    id: my_font
    size: 15

image:
  - file: mdi:wifi
    id: wifi_icon
    resize: ${CHANNEL_HIGHT}x${CHANNEL_HIGHT}
  - file: mdi:home-assistant
    id: home_assistant_icon
    resize: ${CHANNEL_HIGHT}x${CHANNEL_HIGHT}

display:
  - platform: st7735
    id: my_display
    spi_id: spi_bus_2
    model: "INITR_BLACKTAB"
    #reset_pin: D4
    cs_pin: GPIO0
    dc_pin: GPIO2
    rotation: 270
    device_width: 128
    device_height: 160
    col_start: 0
    row_start: 0
    eight_bit_color: true
    update_interval: 5s
    lambda: |-
      const auto RED = Color(255, 0, 0);
      const auto GREEN = Color(0, 255, 0);
      const auto BLUE = Color(0, 0, 255);
      const auto YELLOW = Color(255,255,0);
      const auto WHITE = Color(255, 255, 255);

      const auto HEADER_SEPARATOR_HEIGHT = 4;
      const auto HEADER_HIGHT = ${CHANNEL_HIGHT} + HEADER_SEPARATOR_HEIGHT;

      // Clean screen
      it.fill(COLOR_OFF);

      // Temperature
      it.printf(0,
                ${CHANNEL_HIGHT}/2,
                id(my_font),
                WHITE,
                TextAlign::CENTER_LEFT,
                "%.1f °C", id(temp_id).state);

      // Wifi connected
      it.image (it.get_width(),
                ${CHANNEL_HIGHT}/2,
                id(wifi_icon),
                ImageAlign::CENTER_RIGHT,
                id(wifi_id).is_connected() ? GREEN : RED);

      // API connected
      it.image (it.get_width() - ${CHANNEL_HIGHT},
                ${CHANNEL_HIGHT}/2,
                id(home_assistant_icon),
                ImageAlign::CENTER_RIGHT,
                id(api_id).is_connected() ? GREEN : RED);

      // Separator
      it.filled_rectangle(0, ${CHANNEL_HIGHT}, it.get_width(), HEADER_SEPARATOR_HEIGHT, WHITE);

      // Draw channels
      for (uint8_t channel=0; channel < 4; channel++) {
        
        auto channel_text_color = id(relays)[channel]->state ? YELLOW : BLUE;

        if (channel == id(selected_display_line)) {
          // Fill rectangle for selected channel
          it.filled_rectangle(0, HEADER_HIGHT + channel * ${CHANNEL_HIGHT}, it.get_width(), ${CHANNEL_HIGHT}, channel_text_color);

          // black color
          channel_text_color = COLOR_OFF;
        }
        it.printf(0,
                  HEADER_HIGHT + channel * ${CHANNEL_HIGHT} + ${CHANNEL_HIGHT}/2,
                  id(my_font),
                  channel_text_color,
                  TextAlign::CENTER_LEFT,
                  "%s", id(relay_names)[channel]);
        it.printf(it.get_width(),
                  HEADER_HIGHT + channel * ${CHANNEL_HIGHT} + ${CHANNEL_HIGHT}/2,
                  id(my_font),
                  channel_text_color,
                  TextAlign::CENTER_RIGHT,
                  "%4.1fW ", id(active_powers)[channel]->state);
      }

      //it.filled_rectangle(0                 , 0                  , it.get_width() / 2, it.get_height() / 2, red);
      //it.filled_rectangle(it.get_width()/2-1, 0                  , it.get_width() / 2, it.get_height() / 2, green);
      //it.filled_rectangle(it.get_width()/2-1, it.get_height()/2-1, it.get_width() / 2, it.get_height() / 2, blue);
      //it.filled_rectangle(0                 , it.get_height()/2-1, it.get_width() / 2, it.get_height() / 2, white);
      
      //it.rectangle(20, 50, 30, 30, white);
      //it.rectangle(25, 55, 30, 30, red);
      //it.rectangle(30, 60, 30, 30, green);
      //it.rectangle(35, 65, 30, 30, blue);


