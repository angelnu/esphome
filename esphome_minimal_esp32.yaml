substitutions:
  devicename: esphome_minimal
  sensorname: esphome_minimal
  wifi_ip: "192.168.2.2"

packages:
  #Include location specific settings
  location: !include locations/casa96.yaml
  #Include common definitions for home (wifi, web server, etc)
  settings: !include settings/common.yaml

esphome:
  name: ${devicename}
  platform: ESP32
  board: nodemcu-32s
  build_path: build/${devicename}

light:
  - platform: neopixelbus
    type: GRBW
    variant: SK6812
    method: ESP32_RMT_0
    pin: GPIO22
    num_leds: 42
    name: "NeoPixel Light 0"
  - platform: neopixelbus
    type: GRBW
    variant: SK6812
    method: ESP32_RMT_1
    pin: GPIO23
    num_leds: 300
    name: "NeoPixel Light 1"
    effects:
      - addressable_rainbow:
      - addressable_rainbow:
          name: Rainbow Effect With Custom Values
          speed: 10
          width: 50
      - addressable_color_wipe:
          name: Color Wipe Effect With Custom Values
          colors:
            - red: 100%
              green: 100%
              blue: 100%
              num_leds: 1
            - red: 0%
              green: 0%
              blue: 0%
              num_leds: 1
          add_led_interval: 100ms
          reverse: False
      - addressable_scan:
          name: Scan Effect With Custom Values
          move_interval: 100ms
          scan_width: 1
      - addressable_twinkle:
          name: Twinkle Effect With Custom Values
          twinkle_probability: 5%
          progress_interval: 4ms
      - addressable_random_twinkle:
          name: Random Twinkle Effect With Custom Values
          twinkle_probability: 5%
          progress_interval: 32ms
      - addressable_fireworks:
          name: Fireworks Effect With Custom Values
          update_interval: 32ms
          spark_probability: 10%
          use_random_color: false
          fade_out_rate: 120
      - addressable_flicker:
          name: Flicker Effect With Custom Values
          update_interval: 16ms
          intensity: 5%
      - addressable_lambda:
          name: "My Custom Effect 1"
          update_interval: 16ms
          lambda: |-
            // it.size() - Number of LEDs
            // it[num] - Access the LED at index num.
            // Set the LED at num to the given r, g, b values
            // it[num] = ESPColor(r, g, b);
            // Get the color at index num (ESPColor instance)
            // it[num].get();

            // Example: Simple color wipe
            for (int i = it.size() - 1; i > 0; i--) {
              it[i] = it[i - 1].get();
            }
            it[0] = ESPColor::random_color();

            // Bonus: use .range() and .all() to set many LEDs without having to write a loop.
            it.range(0, 50) = ESPColor(0, 0, 0, 0);
            it.all().fade_to_black(10);
      - addressable_lambda:
          name: "My Custom Effect 2"
          update_interval: 16ms
          lambda: |-
            // Static variables keep their value even when
            // stopping and starting the effect again
            static uint16_t progress = 0;

            // normal variables lost their value after each
            // execution - basically after each update_interval
            uint16_t changes = 0;

            // To reset static when stopping and starting the effect
            // again you can use the initial_run variables
            if (initial_run) {
              progress = 0;
              it.all() = ESPColor(0, 0, 0, 0);
              // optionally do a return so nothing happens until the next update_interval
              return;
            }