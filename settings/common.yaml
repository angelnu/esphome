packages:
  #Include base device definition
  minimal: !include common_minimal.yaml

wifi: 
  #reboot_timeout: 0s
  #power_save_mode: light #NEVER enable this! IT does NOT stay ON
  power_save_mode: none
  #fast_connect: true
  #output_power: 18dB

  # This requires the esp32 esp-idf framework - most devices are older
  # # BSS Transition Management (802.11v) -  makes it possible for one BSS to steer clients to other BSSes
  # enable_btm: true
  # # Radio Resource Management (802.11k) -  enable clients to make better roaming decisions
  # enable_rrm: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${devicename}
    password: !secret wifi_ap_password

captive_portal:

debug:
  update_interval: 1h

text_sensor:
  - platform: debug
    device:
      name: "Device Info"
    reset_reason:
      name: "Reset Reason"
  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true
  - platform: version
    name: "ESPHome Build Timestamp"
    hide_timestamp: false

# Enable Home Assistant API
api:
  reboot_timeout: ${api_reboot_timeout}

#mqtt:
#  broker: !secret mqtt_broker
#  port: !secret mqtt_port
#  username: !secret mqtt_user
#  password: !secret mqtt_password

time:
  - platform: homeassistant
    timezone: Europe/Berlin
  - platform: sntp
    timezone: Europe/Berlin
    # on_time:
    #   # Every 30 minutes
    #   - seconds: 0
    #     minutes: /30
    #     #hours: 4-6
    #     then:
    #       - lambda: |-
    #           if (wifi::global_wifi_component->wifi_rssi() < -70) {
    #             // PATCH: Reset old priorities for known networks
    #             for (auto &scan : wifi::global_wifi_component->get_scan_result()) {
    #               if (wifi::global_wifi_component->has_sta_priority(scan.get_bssid())) {
    #                 wifi::global_wifi_component->set_sta_priority(scan.get_bssid(), 0);
    #               }
    #             }
    #             // Rescan
    #             wifi::global_wifi_component->start_scanning();
    #           }

sensor:
  # WiFi Signal sensor.
  - platform: wifi_signal
    name: WiFi Signal
    id: my_wifi_signal
    update_interval: !secret uptime_update_interval
    entity_category: 'diagnostic'
  - platform: uptime
    name: Uptime
    id: my_uptime
    filters:
      - lambda: return x / 3600.0;
    unit_of_measurement: "h"
    accuracy_decimals: 2
    update_interval: !secret uptime_update_interval
    entity_category: 'diagnostic'
